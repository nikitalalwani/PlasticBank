/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.WarehouseEmployeeRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Warehouse;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PlasticCollectorWorkRequest;
import Business.WorkQueue.RecyclingFactoryEmployeeWorkRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WarehouseEmployeeWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.ManufacturerRole.BuyPlasticJPanel;

/**
 *
 * @author raunak
 */
public class WarehouseEmployeeWorkArea extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Warehouse warehouse;
    private Enterprise enterprise;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public WarehouseEmployeeWorkArea(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Organization organization, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.warehouse = (Warehouse)organization;
        this.enterprise = enterprise;
        
        populateTable();
        populatePlasticRequestTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : warehouse.getWorkQueue().getWorkRequestList()){
            if (request instanceof PlasticCollectorWorkRequest){
            Object[] row = new Object[8];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = ((PlasticCollectorWorkRequest)request).getType();
           
            row[5] = ((PlasticCollectorWorkRequest)request).getGrade();
            row[6] = request.getQuant();
            row[7] = ((PlasticCollectorWorkRequest)request).getMoneyGiven();
            model.addRow(row);
            }
        }
    }
    
        public void populatePlasticRequestTable(){
        DefaultTableModel model = (DefaultTableModel)plasticRequestJTable.getModel();
        
       model.setRowCount(0);
        
        for(WorkRequest request : warehouse.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[10];
            if (request instanceof RecyclingFactoryEmployeeWorkRequest){
            row[0] = request.getSender().getUsername();
            row[1] = request.getReceiver() == null ? null : request.getReceiver().getUsername();
            row[2] = request.getStatus();
            row[7] = ((RecyclingFactoryEmployeeWorkRequest)request).getGrade();
            row[8] = ((RecyclingFactoryEmployeeWorkRequest)request).getQuantity();
            row[9] = ((RecyclingFactoryEmployeeWorkRequest)request).getPrice();
            model.addRow(row);
            } else if (request instanceof TransportWorkRequest) {
            row[3] = ((TransportWorkRequest)request).getSource();
            row[4] = ((TransportWorkRequest)request).getDestination();
            row[5] = ((TransportWorkRequest)request).getNumberOfTrucks();
            row[6] = ((TransportWorkRequest)request).getTransportationCost();
            }
        }
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        plasticRequestJTable = new javax.swing.JTable();
        assignPlasticRequest = new javax.swing.JButton();
        checkPlastic = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignPlastic = new javax.swing.JButton();
        processPlasticRequest = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        plasticRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Status", "Source", "Destination", "Trucks", "Transport Cost", "Grade", "Quantity", "Earnings"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(plasticRequestJTable);
        if (plasticRequestJTable.getColumnModel().getColumnCount() > 0) {
            plasticRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            plasticRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            plasticRequestJTable.getColumnModel().getColumn(7).setResizable(false);
            plasticRequestJTable.getColumnModel().getColumn(8).setResizable(false);
            plasticRequestJTable.getColumnModel().getColumn(9).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 680, 96));

        assignPlasticRequest.setText("Assign to me");
        assignPlasticRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignPlasticRequestActionPerformed(evt);
            }
        });
        add(assignPlasticRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 110, -1));

        checkPlastic.setText("Check Plastic");
        checkPlastic.setEnabled(false);
        checkPlastic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPlasticActionPerformed(evt);
            }
        });
        add(checkPlastic, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 110, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, -1, -1));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Plastic Type", "Grade", "Quantity", "Money Given"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setHeaderValue("Message");
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setHeaderValue("Receiver");
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setHeaderValue("Plastic Type");
            workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(6).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(7).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 620, 96));

        assignPlastic.setText("Assign to me");
        assignPlastic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignPlasticActionPerformed(evt);
            }
        });
        add(assignPlastic, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, -1));

        processPlasticRequest.setText("Process Request");
        processPlasticRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processPlasticRequestActionPerformed(evt);
            }
        });
        add(processPlasticRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 330, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignPlasticRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignPlasticRequestActionPerformed
        int selectedRow = plasticRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please choose a row from the table");
            return;
        }
        
        WorkRequest request = (WorkRequest)plasticRequestJTable.getValueAt(selectedRow, 0);
        if (request instanceof RecyclingFactoryEmployeeWorkRequest){
        System.out.println("###"+request.getStatus());
        if(request.getStatus().equals("Completed"))
        {
          JOptionPane.showMessageDialog(null, "This request has already been processed");
          return;
        }
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populatePlasticRequestTable();
        //checkPlastic.setEnabled(false);
      }
    }//GEN-LAST:event_assignPlasticRequestActionPerformed

    private void checkPlasticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPlasticActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please choose a value from the table");
            return;
        }
        
        PlasticCollectorWorkRequest request = (PlasticCollectorWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(request.getStatus().equals("Completed"))
            
        {
         JOptionPane.showMessageDialog(null, "This request has already been processed");
          
          return;
        }
        
        request.setStatus("Processing");
        
        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_checkPlasticActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignPlasticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignPlasticActionPerformed
        // TODO add your handling code here:
        checkPlastic.setEnabled(true);
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please choose a row from the table");
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        System.out.println("###"+request.getStatus());
        if(request.getStatus().equals("Completed"))
        {
          JOptionPane.showMessageDialog(null, "This request has already been processed");
          checkPlastic.setEnabled(false);
          return;
        }
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateTable();
        //checkPlastic.setEnabled(false);
    }//GEN-LAST:event_assignPlasticActionPerformed

    private void processPlasticRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processPlasticRequestActionPerformed
        // TODO add your handling code here:
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("ProcessPlastic", new ProcessPlasticRequestJPanel(userProcessContainer, userAccount, enterprise, warehouse, business));
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processPlasticRequestActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignPlastic;
    private javax.swing.JButton assignPlasticRequest;
    private javax.swing.JButton checkPlastic;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable plasticRequestJTable;
    private javax.swing.JButton processPlasticRequest;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
